proj4string(df_move) <- CRS(paste0("+init=epsg:", crscode))
mapview(df_move)
mapview(df_move)
mapview(df_move)
# Change the projection
crscode <- crs_epsg
proj4string(df_move) <- CRS(paste0("+init=epsg:", crscode))
mapview(df_move)
data_df <- file
# Rename the column
names(data_df)[which(names(data_df) == Id_name)] <- "groupid"
# Change the time format
data_df$time <- as.POSIXct(data_df$timestamp, format = tf, tz="UTC")
# Remove the NA from data_df
data_df_no_na <- na.omit(data_df)
# Sort the dataset based on the timestamp column
no_na_df_sorted <- data_df_no_na[order(data_df_no_na$time), ]
# Identify duplicate timestamps
duplicate_indices <- duplicated(no_na_df_sorted$time) |
duplicated(no_na_df_sorted$time, fromLast = TRUE)
# Remove duplicate timestamps
no_na_data_unique <- no_na_df_sorted[!duplicate_indices, ]
# Create a "code name" column to be used for home range estimation
no_na_data_unique$Month_code <- month(no_na_data_unique$time)
no_na_data_unique$Year_code <- year(no_na_data_unique$time)
no_na_data_unique$Code <- paste(no_na_data_unique$Month_code, no_na_data_unique$Year_code, no_na_data_unique$groupid)
# Create move object with sorted dataset
df_move <- move(
x = no_na_data_unique$x,
y = no_na_data_unique$y,
time = as.POSIXct(no_na_data_unique$time, format = tf, tz = "UTC"),
data = no_na_data_unique,
Id = na_na_data_unique$groupid,
group = no_na_data_unique$Code,
crs = crs_epsg
)
# Change the projection
crscode <- crs_epsg
proj4string(df_move) <- CRS(paste0("+init=epsg:", crscode))
#'perc <- 95
#'
#' library(homdista)
#'
#' #Make the move object from data frame
#' moveObj <- homdista::moveObject(file, tf, Id_name, crs_epsg)
#'
#' #Create map with mapview
#' mapview(moveObj)
#'
moveObject <- function(file, tf, Id_name, crs_epsg){
# Read the csv data
data_df <- file
# Rename the column
names(data_df)[which(names(data_df) == Id_name)] <- "groupid"
# Change the time format
data_df$time <- as.POSIXct(data_df$timestamp, format = tf, tz="UTC")
# Remove the NA from data_df
data_df_no_na <- na.omit(data_df)
# Sort the dataset based on the timestamp column
no_na_df_sorted <- data_df_no_na[order(data_df_no_na$time), ]
# Identify duplicate timestamps
duplicate_indices <- duplicated(no_na_df_sorted$time) |
duplicated(no_na_df_sorted$time, fromLast = TRUE)
# Remove duplicate timestamps
no_na_data_unique <- no_na_df_sorted[!duplicate_indices, ]
# Create a "code name" column to be used for home range estimation
no_na_data_unique$Month_code <- month(no_na_data_unique$time)
no_na_data_unique$Year_code <- year(no_na_data_unique$time)
no_na_data_unique$Code <- paste(no_na_data_unique$Month_code, no_na_data_unique$Year_code, no_na_data_unique$groupid)
# Create move object with sorted dataset
df_move <- move(
x = no_na_data_unique$x,
y = no_na_data_unique$y,
time = as.POSIXct(no_na_data_unique$time, format = tf, tz = "UTC"),
data = no_na_data_unique,
Id = na_na_data_unique$groupid,
group = no_na_data_unique$Code,
crs = crs_epsg
)
# Change the projection
crscode <- crs_epsg
proj4string(df_move) <- CRS(paste0("+init=epsg:", crscode))
}
mapview(df_move)
df_move
mapview(df_move)
df_move
plot(df_move)
move::angle(df_move)
move::distance(df_move)
cc <- unlist(move::distance(df_move))
cc
library(homdista)
roxygenize2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::document()
rm(list = c("moveObject"))
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
library(homdista)
library(homdista)
library(homdista)
file <- read.csv("C:/Users/Jado/Documents/DFGF/RE_HR_analysis_2020-2022/Combined file RDB & KRC/test_test.csv")
library(lubridate)
library(sf)
library(sp)
library(move)
f <- homdista::moveObject(file, "%m/%d/%y %I:%M %p", "GORILLA_GROUP", 32735)
library(homdista)
file <- read.csv("C:/Users/Jado/Documents/DFGF/RE_HR_analysis_2020-2022/Combined file RDB & KRC/test_test.csv")
library(lubridate)
library(move)
f <- homdista::moveObject(file, "%m/%d/%y %I:%M %p", "GORILLA_GROUP", 32735)
plot(f)
move::disatance(df_move)
move::distance(df_move)
move::distance(f)
library(homdista)
move::angle(f)
usethat::vigette()
vignette(homdista)
library(homdista)
devtools::use_vignette("introduction")
usethat::use_vignette("introduction")
usethis::use_vignette("introduction")
library(homdista)
library(homdista)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(homdista)
# Read the file
file <- read.csv("C:/Users/Jado/Documents/EAGLE/Semester 2/Data/data.csv", header=T)
# Read the file
file <- read.csv("C:/Users/Jado/Documents/EAGLE/Semester2/Animal_movement/Data/data.csv", header=T)
# Estimating the home range size and walked distances per month
Homerange_distance <- homdista::homdista(file ,"%m/%d/%y %I:%M %p", 32735, "Animal", 90, 200)
library(homdista)
library(lubridate)
library(sf)
library(sp)
library(adehabitatLT)
library(adehabitatHR)
library(mapview)
library(ggplot2)
library(move)
# Estimating the home range size and walked distances per month
Homerange_distance <- homdista::homdista(file ,"%m/%d/%y %I:%M %p", 32735, "Animal", 90, 200)
Homerange_distance
# Determining and plotting the correlation between walked distance and utilized home range area
Correlation <- homdista::hodicor(Homerange_distance, "spearman")
plot(Correlation)
# Walked distance line paths
Distance <- homdista::distwalk(file, "%m/%d/%y %I:%M %p", 32735, "Animal")
mapview(Distance)
# Home range polygons
Homerange <- homdista::homekde(file, "%m/%d/%y %I:%M %p", 32735, "Animal", 90, 200)
st_as_sf(Homerange)
palette <- rainbow(length(unique(Homerange$Id)))
mapview(Homerange, zcol = "Id", col.regions = palette,
legend = TRUE, legend.title = "", legend.values = unique(Homerange$Id))
# Data frame to move object
Move <- homdista::moveObject(file, "%m/%d/%y %I:%M %p", "Animal", 32735)
plot(Move)
move::distance(Move)
move::angle(Move)
suppressWarnings({
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
})
library(homdista)
library(lubridate)
library(sf)
library(sp)
library(adehabitatLT)
library(adehabitatHR)
library(mapview)
library(ggplot2)
library(move)
# Read the file
file <- read.csv("C:/Users/Jado/Documents/EAGLE/Semester2/Animal_movement/Data/data.csv", header=T)
# Estimating the home range size and walked distances per month
Homerange_distance <- homdista::homdista(file ,"%m/%d/%y %I:%M %p", 32735, "Animal", 90, 200)
# Determining and plotting the correlation between walked distance and utilized home range area
Correlation <- homdista::hodicor(Homerange_distance, "spearman")
# Walked distance line paths
Distance <- homdista::distwalk(file, "%m/%d/%y %I:%M %p", 32735, "Animal")
mapview(Distance)
# Home range polygons
Homerange <- homdista::homekde(file, "%m/%d/%y %I:%M %p", 32735, "Animal", 90, 200)
st_as_sf(Homerange)
palette <- rainbow(length(unique(Homerange$Id)))
mapview(Homerange, zcol = "Id", col.regions = palette,
legend = TRUE, legend.title = "", legend.values = unique(Homerange$Id))
# Data frame to move object
Move <- homdista::moveObject(file, "%m/%d/%y %I:%M %p", "Animal", 32735)
plot(Move)
move::distance(Move)
move::angle(Move)
library(RStoolbox)
library(sf)
library(move)
library(lubridate)
library(amt)
library(ggplot2)
library(terra)
library(ctmm)
# Load traj data
load("C:/Users/Jado/Documents/EAGLE/Semester 2/Data/buffalo_utm.rda")
load("C:/Users/Jado/Documents/EAGLE/Semester2/Animal_movement/Data/buffalo_utm.rda")
load("C:/Users/Jado/Documents/EAGLE/Semester2/Animal_movement/Data/buffalo_env.rda")
raster::plot(buffalo_env)
raster::plot(raster(buffalo_env, 1))
points(buffalo_utm)
cilla <- buffalo_utm[["Cilla"]]
names(buffalo_env)
names(buffalo_utm)
indiv(buffalo_utm)
individual(buffalo_utm)
names(buffalo_utm$event.id)
buffalo_utm$event.id
(buffalo_utm
dev.off()
buffalo_utm
cilla <- cilla[timestamps(cilla) > min(timestamps(cilla)) + days(1), ]
cilla
cilla_telemetry <- as.telemetry(cilla)
cilla_telemetry
cilla_guess <- ctmm.guess(
cilla_telemetry, CTMM = ctmm(isotropic = T), interactive = F
)
cilla_select <- ctmm.select(
cilla_telemetry, cilla_guess
)
cilla_select$akde <- akde(cilla_telemetry, cilla_select)
plot(cilla_telemetry, UD=cilla_select$akde)
# Create predictor env dataset
predictors <- list(
"elev" = raster(buffalo_env, "elev"),
"slope"= raster(buffalo_env, "slope"),
"var_NDVI" = raster(buffalo_env, "var_NDVI")
)
cilla_rf_riemann <- rsf.fit(
cilla_telemetry, cilla_select$akde, R = predictors,
integrator = "Riemann"
)
summary(cilla_rf_riemann)
cilla_rsf_suitability <- suitability(
data = cilla_telemetry, CTMM = cilla_rf_riemann,
R = predictors, grid = crop(predictors[[1]], extent(cilla)*2)
)
raster::plot(cilla_rsf_suitability)
agde_cilla <- agde(cilla_telemetry, CTMM = cilla_rf_riemann,
R = predictors)
raster::plot(agde_cilla)
git commit --no-verify
git commit --no-verify
library(homdista)
usethis::use_readme_rmd
usethis::use_readme_rmd()
usethis::use_vignette()
usethis::use_vignette(vignette)
usethis::use_vignette("Knit")
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
library(homdista)
setwd("~/EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista")
## Home range area (with Kernel density estimator) and walked distance calculation
file <- read.csv("data.csv", header = T)
library(homdista)
# Additional packages
library(sp)
library(sf)
library(lubridate)
library(adehabitatLT)
library(adehabitatHR)
library(tidyr)
options(warn = -1)
## Home range area (with Kernel density estimator) and walked distance calculation
file <- read.csv("data.csv", header = T)
area_distance <- homdista(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
options(warn = 0)
area_distance
area_distance <- homdista(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
area_distance
library(homdista)
devtools::build_readme()
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
## Generates polygons representing the utilized areas
file <- read.csv("data.csv", header = T)
homerange <- homekde(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
# Convert "sp" object to "sf"
homerange_sf <- st_as_sf(homerange)
# Define a palette for colors
palette <- rainbow(length(unique(homerange_sf$Id)))
#Create map with mapview
mapview(homerange_sf, zcol = "Id", col.regions = palette, legend = TRUE, legend.title = "", legend.values = unique(homerange_sf$Id))
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
## Generates polygons representing the utilized areas
file <- read.csv("data.csv", header = T)
homerange <- homekde(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
# Convert "sp" object to "sf"
Homerange <- st_as_sf(homerange)
# Define a palette for colors
palette <- rainbow(length(unique(Homerange$Id)))
#Create map with mapview
mapview(Homerange, zcol = "Id", col.regions = palette, legend = TRUE, legend.title = "", legend.values = unique(Homerange$Id))
devtools::build_readme()
library(homdista)
library(homdista)
devtools::build_readme()
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
library(move)
Move <- moveObject(file, "%m/%d/%y %I:%M %p", "Animal", 32734)
angle <- angle(Move)
summary(angle)
mapview(Move)
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
## Generates polygons representing the utilized areas
homerange <- homekde(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
# Convert "sp" object to "sf"
Homerange <- st_as_sf(homerange)
# Define a palette for colors
palette <- rainbow(length(unique(Homerange$Id)))
#Create map with mapview
mapview(Homerange, zcol = "Id", col.regions = palette, legend = TRUE, legend.title = "", legend.values = unique(Homerange$Id))
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(ggplot2)
## Home range area (with Kernel density estimator) and walked distance calculation
area_distance <- homdista(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
## Correlation values and plot the relationship between area and distance values using spearman method
Correlation <- hodicor(area_distance, "spearman")
Correlation
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
Distance <- distwalk(file, "%m/%d/%y %I:%M %p", 32734, "Animal")
mapview(Distance)
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
library(mapview)
library(move)
Move <- moveObject(file, "%m/%d/%y %I:%M %p", "Animal", 32734)
angle <- angle(Move)
summary(angle)
mapview(Move)
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
## Home range area (with Kernel density estimator) and walked distance calculation
file <- read.csv("data.csv", header = T)
area_distance <- homdista(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
head(area_distance)
options(warn = -1)
library(homdista)
## Additional packages
library(sp)
library(sf)
library(ade4)
library(adehabitatMA)
library(CircStats)
library(adehabitatLT)
library(adehabitatHR)
library(lubridate)
library(tidyr)
## Home range area (with Kernel density estimator) and walked distance calculation
file <- read.csv("data.csv", header = T)
area_distance <- homdista(file ,"%m/%d/%y %I:%M %p", 32734, "Animal", 90, 500)
st_write(area_distance, 'C:/Users/Jado/Documents\EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista/man/figures/area_distance.csv')
st_write(area_distance, 'C:/Users/Jado/Documents/EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista/man/figures/area_distance.csv')
setwd("~/EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista")
library(homdista)
roxygen2::roxygenize()
devtools::document()
devtools::build_readme()
library(homdista)
devtools::build_readme()
usethis::use_vignette('Vignette')
devtools::build_readme()
devtools::build_readme()
devtools::build_readme("README.md")
devtools::build_readme("C:/Users/Jado/Documents/EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista/README.md")
devtools::build_readme("C:/Users/Jado/Documents/EAGLE/Introduction-to-programming/Exam_files/Homerengedistance/homdista")
devtools::build_readme()
devtools::build_readme()
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
roxygen2::roxygenize()
devtools::document()
library(homdista)
library(homdista)
roxygen2::roxygenize()
evtools::document()
devtools::document()
library(homdista)
